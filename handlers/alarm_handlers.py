from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
import emoji

from states import AlarmStates
import map
import consts
import db
import kb


router = Router()


@router.message(F.text.lower() == emoji.emojize("üÜò –º–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!"))
async def geo_handler(message: Message, state: FSMContext):
    await message.answer("–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ! –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!", reply_markup=kb.geo_kb())
    await state.set_state(AlarmStates.geodata)


@router.message(AlarmStates.geodata)
async def mobile_handler(message: Message, state: FSMContext):
    await state.update_data(geo=str(message.location.longitude) + "," + str(message.location.latitude))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
                         reply_markup=kb.contact_kb())
    await state.set_state(AlarmStates.mobile)


@router.message(AlarmStates.mobile)
async def name_handler(message: Message, state: FSMContext):
    await state.update_data(mobile=message.contact.phone_number)
    await message.answer("–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ",
                         reply_markup=kb.exit_kb())
    await state.set_state(AlarmStates.name)


@router.message(AlarmStates.name, F.text)
async def charge_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ø–∏—à–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    await state.set_state(AlarmStates.charge)


@router.message(AlarmStates.charge, F.text)
async def look_handler(message: Message, state: FSMContext):
    await state.update_data(charge=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ, –∫–∞–∫ –≤—ã —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç–µ: –≤–æ —á—Ç–æ –æ–¥–µ—Ç—ã, —Ü–≤–µ—Ç –≤–æ–ª–æ—Å, —Ä–æ—Å—Ç, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ")
    await state.set_state(AlarmStates.look)


@router.message(AlarmStates.look, F.text)
async def situation_handler(message: Message, state: FSMContext):
    await state.update_data(look=message.text)
    await message.answer("–ö–∞–∫ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é? –ß—Ç–æ –≤–∞—Å –æ–∫—Ä—É–∂–∞–µ—Ç?")
    await state.set_state(AlarmStates.situation)


@router.message(AlarmStates.situation, F.text)
async def photo_handler(message: Message, state: FSMContext):
    await state.update_data(situation=message.text)
    await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ {emoji.emojize('‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')},"
                         f" –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                         reply_markup=kb.skip_kb())
    await state.set_state(AlarmStates.photo)


@router.message(AlarmStates.photo, F.text == emoji.emojize("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def note_handler_no_photo(message: Message, state: FSMContext, bot: Bot):
    ll = await state.get_data()
    db.add_alarmik(message.from_user.id, *[ll[key] for key in ll])
    db.add_alarm_id(message.from_user.id)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—Ç –ø–æ–º–æ—â—å! "
                         "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –Ω–µ —É—Ö–æ–¥–∏—Ç–µ –¥–∞–ª–µ–∫–æ –æ—Ç –≤–∞—à–µ–π –Ω—ã–Ω–µ—à–Ω–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ "
                         "–∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏!", reply_markup=kb.first_choose_kb())
    await bot.send_message(consts.TUTOR_ID,
                           emoji.emojize(
                               f"<b>:collision:–í–ù–ò–ú–ê–ù–ò–ï!!! –ß–ï–õ–û–í–ï–ö –í –û–ü–ê–°–ù–û–°–¢–ò!!!:collision:</b>\n–ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:"
                               f"{ll['geo']}\n"
                               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ll['mobile']}\n–§–ò–û: {ll['name']}\n–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: "
                               f"{ll['charge']}\n"
                               f"–û–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞: {ll['look']}\n–û–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã: {ll['situation']}"),
                           parse_mode=ParseMode.HTML, reply_markup=kb.inline_alarming_kb()
                           )
    await bot.send_photo(consts.TUTOR_ID, map.create_map(ll["geo"]))
    await state.clear()


@router.message(AlarmStates.photo, F.photo)
async def note_handler_photo(message: Message, state: FSMContext, bot: Bot):
    ll = await state.get_data()
    db.add_alarmik(message.from_user.id, *[ll[key] for key in ll], message.photo[-1].file_id)
    db.add_alarm_id(message.from_user.id)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—Ç –ø–æ–º–æ—â—å! "
                         "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –Ω–µ —É—Ö–æ–¥–∏—Ç–µ –¥–∞–ª–µ–∫–æ –æ—Ç –≤–∞—à–µ–π –Ω—ã–Ω–µ—à–Ω–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ "
                         "–∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏!", reply_markup=kb.first_choose_kb())
    await bot.send_message(consts.TUTOR_ID,
                           emoji.emojize(
                               f"<b>:collision:–í–ù–ò–ú–ê–ù–ò–ï!!! –ß–ï–õ–û–í–ï–ö –í –û–ü–ê–°–ù–û–°–¢–ò!!!:collision:</b>\n–ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:"
                               f"{ll['geo']}\n"
                               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ll['mobile']}\n–§–ò–û: {ll['name']}\n–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: "
                               f"{ll['charge']}\n"
                               f"–û–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞: {ll['look']}\n–û–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã: {ll['situation']}"),
                           parse_mode=ParseMode.HTML, reply_markup=kb.inline_alarming_kb()
                           )
    await bot.send_photo(consts.TUTOR_ID, map.create_map(ll["geo"]))
    await bot.send_photo(consts.TUTOR_ID, message.photo[-1].file_id)
    await state.clear()
